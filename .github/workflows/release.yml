name: Build and Release Go Binaries

on:
  push:
    branches:
      - main

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      file_version_tag: ${{ steps.read_version.outputs.file_version_tag }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Read versioninfo.json
        id: read_version
        run: |
          version=$(jq -r '.FixedFileInfo.FileVersion | "\(.Major).\(.Minor).\(.Patch).\(.Build)"' versioninfo.json)
          echo "file_version_tag=v$version" >> "$GITHUB_OUTPUT"

      - name: Read latest commit message safely (base64 encoded)
        id: msg
        run: |
          msg="$(git log -1 --pretty=%B | base64 -w0)"
          echo "commit_msg=$msg" >> $GITHUB_ENV

      - name: Generate release notes (base64 encoded)
        id: notes
        shell: bash
        run: |
          range="$(git rev-list --max-parents=0 HEAD)..HEAD"
          notes="$(git log $range --pretty=format:'- %s (%an)' | base64 -w0)"
          echo "release_notes=$notes" >> $GITHUB_ENV

  build:
    needs: get_version
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
    runs-on: ${{ matrix.os }}
    env:
      APP_NAME: xiaoniao
      CGO_ENABLED: "0"
      BUILD_TAGS: "netgo osusergo"
      COMMON_LDFLAGS: "-s -w -buildid="
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Go env & deps
        run: |
          go env
          go mod download

      - name: Install goversioninfo
        if: matrix.goos == 'windows'
        run: go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest

      - name: Generate Windows version info and icon
        if: matrix.goos == 'windows'
        run: |
          goversioninfo \
            -o "${{ github.workspace }}/cmd/xiaoniao/versioninfo.syso" \
            -manifest="${{ github.workspace }}/xiaoniao.exe.manifest" \
            -icon="${{ github.workspace }}/assets/icon.ico" \
            "${{ github.workspace }}/versioninfo.json"

      - name: Build binary
        shell: bash
        run: |
          mkdir -p dist
          OUTPUT_FILE="dist/${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -trimpath -tags "${BUILD_TAGS}" \
            -ldflags "${COMMON_LDFLAGS}" \
            -o "$OUTPUT_FILE" ./cmd/xiaoniao

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    needs: [get_version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Decode release notes
        id: decode_notes
        run: |
          decoded="$(echo "${{ needs.get_version.outputs.release_notes }}" | base64 -d)"
          {
            echo 'body<<EOF'
            echo "$decoded"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get_version.outputs.file_version_tag }}
          name: Release ${{ needs.get_version.outputs.file_version_tag }}
          body: ${{ steps.decode_notes.outputs.body }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
