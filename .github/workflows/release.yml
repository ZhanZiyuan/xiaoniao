name: Build and Release Go Binaries

on:
  push:
    branches:
      - main

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.read_ver.outputs.release_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read versioninfo.json
        id: read_ver
        shell: bash
        run: |
          version=$(jq -r '.FixedFileInfo.FileVersion | "\(.Major).\(.Minor).\(.Patch).\(.Build)"' versioninfo.json)
          echo "Release version from versioninfo.json: $version"
          echo "release_tag=v$version" >> "$GITHUB_OUTPUT"

  build:
    needs: get_version
    runs-on: windows-latest
    env:
      APP_NAME: xiaoniao
      CGO_ENABLED: "0"
      BUILD_TAGS: "netgo osusergo"
      COMMON_LDFLAGS: "-s -w -buildid="
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Go env & deps
        run: |
          go env
          go mod download

      - name: Install goversioninfo
        run: go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest

      - name: Generate Windows version info and icon
        run: |
          goversioninfo `
            -o "${{ github.workspace }}/cmd/xiaoniao/versioninfo.syso" `
            -manifest="${{ github.workspace }}/xiaoniao.exe.manifest" `
            -icon="${{ github.workspace }}/assets/icon.ico" `
            "${{ github.workspace }}/versioninfo.json"

      - name: Build binary
        shell: bash
        run: |
          mkdir -p dist
          OUTPUT_FILE="dist/${APP_NAME}-windows-amd64.exe"

          GOOS=windows GOARCH=amd64 \
            go build -trimpath -tags "${BUILD_TAGS}" \
            -ldflags "${COMMON_LDFLAGS}" \
            -o "$OUTPUT_FILE" ./cmd/xiaoniao

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-windows-amd64
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 下载所有已上传的 artifact
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Debug downloaded files
        run: ls -l dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get_version.outputs.release_tag }}
          name: Release ${{ needs.get_version.outputs.release_tag }}
          body: "Windows xiaoniao binary release"
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
